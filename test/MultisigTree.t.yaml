MultisigTest:
  # Plugin lifecycle
  - given: a newly deployed contract
    then:
      - given: calling initialize
        then:
          - it: should initialize the first time
          - it: should refuse to initialize again
          - it: should set the DAO address

          # updateSettings below should have the same branches:
          - it: should set the minApprovals
          - it: should set onlyListed
          - it: should set signerList
          - it: should set destinationProposalDuration
          - it: should set proposalExpirationPeriod
          - it: should emit MultisigSettingsUpdated
          - when: minApprovals is greater than signerList length [on initialize]
            then:
              - it: should revert
              - it: should revert (with onlyListed false)
              - it: should not revert otherwise
          - when: minApprovals is zero [on initialize]
            then:
              - it: should revert
              - it: should revert (with onlyListed false)
              - it: should not revert otherwise
          - when: signerList is invalid [on initialize]
            then:
              - it: should revert

  - when: calling upgradeTo
    then:
      - it: should revert when called without the permission
      - it: should work when called with the permission

  - when: calling upgradeToAndCall
    then:
      - it: should revert when called without the permission
      - it: should work when called with the permission

  # General methods

  - when: calling supportsInterface
    then:
      - it: does not support the empty interface
      - it: supports IERC165Upgradeable
      - it: supports IPlugin
      - it: supports IProposal
      - it: supports IMultisig

  - when: calling updateSettings
    then:
      - given: caller has no permission
        then:
          - it: should revert
          - it: otherwise it should just work

      # initialize above should have the same branches:
      - it: should set the minApprovals
      - it: should set onlyListed
      - it: should set signerList
      - it: should set destinationProposalDuration
      - it: should set proposalExpirationPeriod
      - it: should emit MultisigSettingsUpdated
      - when: minApprovals is greater than signerList length [on updateSettings]
        then:
          - it: should revert
          - it: should revert (with onlyListed false)
          - it: should not revert otherwise
      - when: minApprovals is zero [on updateSettings]
        then:
          - it: should revert
          - it: should revert (with onlyListed false)
          - it: should not revert otherwise
      - when: signerList is invalid [on updateSettings]
        then:
          - it: should revert

  - when: calling createProposal
    then:
      - it: increments the proposal counter
      - it: creates and return unique proposal IDs
      - it: emits the ProposalCreated event
      - it: creates a proposal with the given values
      - given: settings changed on the same block
        then:
          - it: reverts
          - it: does not revert otherwise
      - given: onlyListed is false
        then:
          - it: allows anyone to create
      - given: onlyListed is true
        and:
          - given: creation caller is not listed or appointed
            then:
              - it: reverts
              - it: reverts if listed before but not now
          - given: creation caller is appointed by a former signer
            then:
              - it: reverts
          - given: creation caller is listed and self appointed
            then:
              - it: creates the proposal
          - given: creation caller is listed, appointing someone else now
            then:
              - it: creates the proposal
          - given: creation caller is appointed by a current signer
            then:
              - it: creates the proposal
      - given: approveProposal is true
        then:
          - it: creates and calls approval in one go
      - given: approveProposal is false
        then:
          - it: only creates the proposal

  # Proposal lifecycle

  - given: The proposal is not created
    then:
      # Get proposal
      - when: calling getProposal [being uncreated]
        then:
          - it: should return empty values
      # Approval
      - when: calling canApprove or approve [being uncreated]
        then:
          - it: canApprove should return false (when currently listed and self appointed)
          - it: approve should revert (when currently listed and self appointed)
          - it: canApprove should return false (when currently listed, appointing someone else now)
          - it: approve should revert (when currently listed, appointing someone else now)
          - it: canApprove should return false (when appointed by a listed signer)
          - it: approve should revert (when appointed by a listed signer)
          - it: canApprove should return false (when currently unlisted and unappointed)
          - it: approve should revert (when currently unlisted and unappointed)
      # Has approved
      - when: calling hasApproved [being uncreated]
        then:
          - it: hasApproved should always return false
      # Execution
      - when: calling canExecute or execute [being uncreated]
        then:
          - it: canExecute should return false (when currently listed and self appointed)
          - it: execute should revert (when currently listed and self appointed)
          - it: canExecute should return false (when currently listed, appointing someone else now)
          - it: execute should revert (when currently listed, appointing someone else now)
          - it: canExecute should return false (when appointed by a listed signer)
          - it: execute should revert (when appointed by a listed signer)
          - it: canExecute should return false (when currently unlisted and unappointed)
          - it: execute should revert (when currently unlisted and unappointed)

  - given: The proposal is open
    then:
      # Get proposal
      - when: calling getProposal [being open]
        then:
          - it: should return the right values
      # Approval
      - when: calling canApprove or approve [being open]
        then:
          - it: canApprove should return true (when listed on creation, self appointed now)
          - it: approve should work (when listed on creation, self appointed now)
          - it: approve should emit an event (when listed on creation, self appointed now)
          - it: canApprove should return false (when listed on creation, appointing someone else now)
          - it: approve should revert (when listed on creation, appointing someone else now)
          - it: canApprove should return true (when currently appointed by a signer listed on creation)
          - it: approve should work (when currently appointed by a signer listed on creation)
          - it: approve should emit an event (when currently appointed by a signer listed on creation)
          - it: canApprove should return false (when unlisted on creation, unappointed now)
          - it: approve should revert (when unlisted on creation, unappointed now)
      # Auto execution
      - when: calling approve with tryExecution and almost passed [being open]
        then:
          - it: approve should also execute the proposal
          - it: approve should emit an Executed event
          # Proposal forwarding on execution
          - it: approve recreates the proposal on the destination plugin
          - it: The parameters of the recreated proposal match those of the approved one
          - it: A ProposalCreated event is emitted on the destination plugin

      # Has approved
      - when: calling hasApproved [being open]
        then:
          - it: hasApproved should return false until approved
      # Execution
      - when: calling canExecute or execute [being open]
        then:
          - it: canExecute should return false (when listed on creation, self appointed now)
          - it: execute should revert (when listed on creation, self appointed now)
          - it: canExecute should return false (when listed on creation, appointing someone else now)
          - it: execute should revert (when listed on creation, appointing someone else now)
          - it: canExecute should return false (when currently appointed by a signer listed on creation)
          - it: execute should revert (when currently appointed by a signer listed on creation)
          - it: canExecute should return false (when unlisted on creation, unappointed now)
          - it: execute should revert (when unlisted on creation, unappointed now)

  - given: The proposal was approved by the address
    then:
      # Get proposal
      - when: calling getProposal [being approved]
        then:
          - it: should return the right values
      # Approval
      - when: calling canApprove or approve [being approved]
        then:
          - it: canApprove should return false (when listed on creation, self appointed now)
          - it: approve should revert (when listed on creation, self appointed now)
          # - it: canApprove should return false (when listed on creation, appointing someone else now)
          # - it: approve should revert (when listed on creation, appointing someone else now)
          - it: canApprove should return false (when currently appointed by a signer listed on creation)
          - it: approve should revert (when currently appointed by a signer listed on creation)
          # - it: canApprove should return false (when unlisted on creation, unappointed now)
          # - it: approve should revert (when unlisted on creation, unappointed now)
      # Has approved
      - when: calling hasApproved [being approved]
        then:
          - it: hasApproved should return false until approved
      # Execution
      - when: calling canExecute or execute [being approved]
        then:
          - it: canExecute should return false (when listed on creation, self appointed now)
          - it: execute should revert (when listed on creation, self appointed now)
          # - it: canExecute should return false (when listed on creation, appointing someone else now)
          # - it: execute should revert (when listed on creation, appointing someone else now)
          - it: canExecute should return false (when currently appointed by a signer listed on creation)
          - it: execute should revert (when currently appointed by a signer listed on creation)
          # - it: canExecute should return false (when unlisted on creation, unappointed now)
          # - it: execute should revert (when unlisted on creation, unappointed now)

  - given: The proposal passed
    then:
      # Get proposal
      - when: calling getProposal [being passed]
        then:
          - it: should return the right values
      # Approval
      - when: calling canApprove or approve [being passed]
        then:
          - it: canApprove should return false (when listed on creation, self appointed now)
          - it: approve should revert (when listed on creation, self appointed now)
          - it: canApprove should return false (when listed on creation, appointing someone else now)
          - it: approve should revert (when listed on creation, appointing someone else now)
          - it: canApprove should return false (when currently appointed by a signer listed on creation)
          - it: approve should revert (when currently appointed by a signer listed on creation)
          - it: canApprove should return false (when unlisted on creation, unappointed now)
          - it: approve should revert (when unlisted on creation, unappointed now)
      # Has approved
      - when: calling hasApproved [being passed]
        then:
          - it: hasApproved should return false until approved
      # Execution
      - when: calling canExecute or execute [being passed]
        then:
          - it: canExecute should return true, always
          - it: execute should work, when called by anyone
          - it: execute should emit an event, when called by anyone
          # Proposal forwarding on execution
          - it: execute recreates the proposal on the destination plugin
          - it: The parameters of the recreated proposal match those of the executed one
          - it: The proposal duration on the destination plugin matches the multisig settings
          - it: A ProposalCreated event is emitted on the destination plugin
      - given: TaikoL1 is incompatible
        then:
          - it: executes successfully, regardless

  - given: The proposal is already executed
    then:
      # Get proposal
      - when: calling getProposal [being executed]
        then:
          - it: should return the right values
      # Approval
      - when: calling canApprove or approve [being executed]
        then:
          - it: canApprove should return false (when listed on creation, self appointed now)
          - it: approve should revert (when listed on creation, self appointed now)
          - it: canApprove should return false (when listed on creation, appointing someone else now)
          - it: approve should revert (when listed on creation, appointing someone else now)
          - it: canApprove should return false (when currently appointed by a signer listed on creation)
          - it: approve should revert (when currently appointed by a signer listed on creation)
          - it: canApprove should return false (when unlisted on creation, unappointed now)
          - it: approve should revert (when unlisted on creation, unappointed now)
      # Has approved
      - when: calling hasApproved [being executed]
        then:
          - it: hasApproved should return false until approved
      # Execution
      - when: calling canExecute or execute [being executed]
        then:
          - it: canExecute should return false (when listed on creation, self appointed now)
          - it: execute should revert (when listed on creation, self appointed now)
          - it: canExecute should return false (when listed on creation, appointing someone else now)
          - it: execute should revert (when listed on creation, appointing someone else now)
          - it: canExecute should return false (when currently appointed by a signer listed on creation)
          - it: execute should revert (when currently appointed by a signer listed on creation)
          - it: canExecute should return false (when unlisted on creation, unappointed now)
          - it: execute should revert (when unlisted on creation, unappointed now)

  - given: The proposal expired
    then:
      # Get proposal
      - when: calling getProposal [being expired]
        then:
          - it: should return the right values
      # Approval
      - when: calling canApprove or approve [being expired]
        then:
          - it: canApprove should return false (when listed on creation, self appointed now)
          - it: approve should revert (when listed on creation, self appointed now)
          - it: canApprove should return false (when listed on creation, appointing someone else now)
          - it: approve should revert (when listed on creation, appointing someone else now)
          - it: canApprove should return false (when currently appointed by a signer listed on creation)
          - it: approve should revert (when currently appointed by a signer listed on creation)
          - it: canApprove should return false (when unlisted on creation, unappointed now)
          - it: approve should revert (when unlisted on creation, unappointed now)
      # Has approved
      - when: calling hasApproved [being expired]
        then:
          - it: hasApproved should return false until approved
      # Execution
      - when: calling canExecute or execute [being expired]
        then:
          - it: canExecute should return false (when listed on creation, self appointed now)
          - it: execute should revert (when listed on creation, self appointed now)
          - it: canExecute should return false (when listed on creation, appointing someone else now)
          - it: execute should revert (when listed on creation, appointing someone else now)
          - it: canExecute should return false (when currently appointed by a signer listed on creation)
          - it: execute should revert (when currently appointed by a signer listed on creation)
          - it: canExecute should return false (when unlisted on creation, unappointed now)
          - it: execute should revert (when unlisted on creation, unappointed now)
