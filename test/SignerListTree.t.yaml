SignerListTest:
  # contract lifecycle
  - when: deploying the contract
    then:
      - it: should initialize normally
  - given: a deployed contract
    then:
      - it: should refuse to initialize again
  - given: a new instance
    and:
      - given: calling initialize
        and:
          - it: should set the DAO address
          # Same checks as addSigners below
          - given: passing more addresses than supported [on initialize]
            then:
              - it: should revert
          - given: duplicate addresses [on initialize]
            then:
              - it: should revert
          - it: should append the new addresses to the list
          - it: should emit the SignersAddedEvent
          # Same checks as updateSettings below
          - when: encryptionRegistry is not compatible [on initialize]
            then:
              - it: should revert
          - when: minSignerListLength is lower than the list size [on initialize]
            then:
              - it: should revert
          - it: sets the new encryption registry
          - it: sets the new minSignerListLength
          - it: should emit a SignerListSettingsUpdated event

  - when: calling updateSettings
    and:
      - when: updateSettings without the permission
        then:
          - it: should revert
      # Same checks as initialize does above
      - when: encryptionRegistry is not compatible [on updateSettings]
        then:
          - it: should revert
      - when: minSignerListLength is lower than the list size [on updateSettings]
        then:
          - it: should revert
      - it: set the new encryption registry
      - it: set the new minSignerListLength
      - it: should emit a SignerListSettingsUpdated event

  - when: calling supportsInterface
    then:
      - it: does not support the empty interface
      - it: supports IERC165Upgradeable
      - it: supports Addresslist
      - it: supports ISignerList

  # List lifecycle
  - when: calling addSigners
    and:
      - when: adding without the permission
        then:
          - it: should revert
      - given: passing more addresses than supported [on updateSettings]
        then:
          - it: should revert
      - given: duplicate addresses [on updateSettings]
        then:
          - it: should revert
      - it: should append the new addresses to the list
      - it: should emit the SignersAddedEvent

  - when: calling removeSigners
    and:
      - when: removing without the permission
        then:
          - it: should revert
      - when: removing an unlisted address
        then:
          - it: should continue gracefully
      - given: removing too many addresses
        comment: The new list will be smaller than minSignerListLength
        then:
          - it: should revert
      - it: should more the given addresses
      - it: should emit the SignersRemovedEvent

  # Getters
  - when: calling isListed
    and:
      - given: the member is listed
        then:
          - it: returns true
      - given: the member is not listed
        then:
          - it: returns false

  - when: calling isListedAtBlock
    and:
      - given: the member was listed
        and:
          - given: the member is not listed now
            then:
              - it: returns true
          - given: the member is listed now
            then:
              - it: returns true
      - given: the member was not listed
        and:
          - given: the member is delisted now
            then:
              - it: returns false
          - given: the member is enlisted now
            then:
              - it: returns false

  # Encryption getters
  - when: calling resolveEncryptionAccountStatus
    and:
      - given: the caller is a listed signer
        then:
          - it: ownerIsListed should be true
          - it: isAppointed should be false
      - given: the caller is appointed by a signer
        then:
          - it: ownerIsListed should be true
          - it: isAppointed should be true
      - given: the caller is not listed or appointed
        then:
          - it: ownerIsListed should be false
          - it: isAppointed should be false

  - when: calling resolveEncryptionOwner
    and:
      - given: the resolved owner is listed
        and:
          - when: the given address is appointed
            then:
              - it: owner should be the resolved owner
              - it: appointedWallet should be the caller
          - when: the given address is not appointed
            then:
              - it: owner should be the caller
              - it: appointedWallet should be resolved appointed wallet

      - given: the resolved owner is not listed
        then:
          - it: should return a zero owner
          - it: should return a zero appointedWallet

  - when: calling getEncryptionRecipients
    and:
      - given: the encryption registry has no accounts
        then:
          - it: returns an empty list, even with signers
          - it: returns an empty list, without signers

      - given: the encryption registry has accounts
        then:
          - given: no overlap between registry and signerList
            comment: Some are on the encryption registry only and some are on the signerList only
            then:
              - it: returns an empty list
          - given: some addresses are registered everywhere
            then:
              - it: returns a list containing the overlapping addresses
              - it: the result has the correct resolved addresses
                comment: appointed wallets are present, not the owner
              - it: result does not contain unregistered addresses
              - it: result does not contain unlisted addresses
              - it: result does not contain non appointed addresses
